# Generated by Django 5.2.4 on 2025-08-02 19:30

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AILearningData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('success', 'Successful Reply'), ('failure', 'Failed Reply'), ('improvement', 'Improvement Needed')], max_length=20)),
                ('post_title', models.TextField()),
                ('post_content', models.TextField()),
                ('original_reply', models.TextField()),
                ('user_feedback', models.TextField(blank=True, null=True)),
                ('improved_reply', models.TextField(blank=True, null=True)),
                ('keywords_used', models.TextField(blank=True, null=True)),
                ('subreddit', models.CharField(max_length=50)),
                ('engagement_score', models.FloatField(default=0.0)),
                ('success_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used_for_training', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIPerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('template_type', models.CharField(choices=[('classification', 'Post Classification'), ('intent_extraction', 'Intent Extraction'), ('reply_generation', 'Reply Generation'), ('follow_up', 'Follow-up Generation')], max_length=20)),
                ('total_requests', models.IntegerField(default=0)),
                ('successful_requests', models.IntegerField(default=0)),
                ('failed_requests', models.IntegerField(default=0)),
                ('avg_response_time', models.FloatField(default=0.0)),
                ('avg_engagement_score', models.FloatField(default=0.0)),
                ('avg_success_score', models.FloatField(default=0.0)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('date', 'template_type')},
            },
        ),
        migrations.CreateModel(
            name='AIPromptTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_type', models.CharField(choices=[('classification', 'Post Classification'), ('intent_extraction', 'Intent Extraction'), ('reply_generation', 'Reply Generation'), ('follow_up', 'Follow-up Generation')], max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('prompt_template', models.TextField()),
                ('version', models.IntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('success_rate', models.FloatField(default=0.0)),
                ('usage_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-version'],
                'unique_together': {('template_type', 'name', 'version')},
            },
        ),
    ]
