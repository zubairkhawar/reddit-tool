# Generated by Django 5.2.4 on 2025-08-02 19:30

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIPersona',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('tone', models.CharField(default='professional', max_length=50)),
                ('style', models.TextField()),
                ('include_portfolio', models.BooleanField(default=False)),
                ('portfolio_url', models.URLField(blank=True)),
                ('include_cta', models.BooleanField(default=True)),
                ('cta_text', models.CharField(default='DM me if this sounds like a good fit!', max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['keyword'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('posts_scraped', models.IntegerField(default=0)),
                ('opportunities_found', models.IntegerField(default=0)),
                ('replies_posted', models.IntegerField(default=0)),
                ('replies_with_responses', models.IntegerField(default=0)),
                ('total_upvotes_received', models.IntegerField(default=0)),
                ('total_engagement', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='RedditPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reddit_id', models.CharField(max_length=20, unique=True)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('author', models.CharField(max_length=50)),
                ('url', models.URLField()),
                ('score', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField()),
                ('fetched_at', models.DateTimeField(auto_now_add=True)),
                ('is_opportunity', models.BooleanField(default=False)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='low', max_length=20)),
                ('last_monitored_at', models.DateTimeField(blank=True, null=True)),
                ('monitoring_enabled', models.BooleanField(default=True)),
                ('engagement_increased', models.BooleanField(default=False)),
                ('new_comments_since_last_check', models.IntegerField(default=0)),
                ('follow_up_sent', models.BooleanField(default=False)),
                ('follow_up_sent_at', models.DateTimeField(blank=True, null=True)),
                ('follow_up_content', models.TextField(blank=True, null=True)),
                ('follow_up_response_received', models.BooleanField(default=False)),
                ('follow_up_response_content', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Subreddit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SystemConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('keyword', 'Keyword'), ('subreddit', 'Subreddit'), ('reply_template', 'Reply Template')], max_length=20)),
                ('name', models.CharField(max_length=100)),
                ('total_posts', models.IntegerField(default=0)),
                ('total_opportunities', models.IntegerField(default=0)),
                ('total_replies', models.IntegerField(default=0)),
                ('total_engagement', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('avg_engagement_rate', models.FloatField(default=0.0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-total_engagement', '-success_rate'],
                'unique_together': {('metric_type', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('high_priority', 'High Priority Post'), ('reply_posted', 'Reply Posted'), ('engagement_increase', 'Engagement Increase'), ('follow_up_sent', 'Follow-up Sent'), ('success_marked', 'Success Marked'), ('error', 'Error')], max_length=20)),
                ('title', models.CharField(default='Notification', max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('whatsapp_sent', models.BooleanField(default=False)),
                ('whatsapp_sent_at', models.DateTimeField(blank=True, null=True)),
                ('whatsapp_message_id', models.CharField(blank=True, max_length=100, null=True)),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reddit.redditpost')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_opportunity', models.BooleanField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='low', max_length=10)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('summary', models.TextField(blank=True)),
                ('intent', models.TextField(blank=True)),
                ('budget_mentioned', models.BooleanField(default=False)),
                ('budget_amount', models.CharField(blank=True, max_length=50)),
                ('services_needed', models.TextField(blank=True)),
                ('urgency_level', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='classification', to='reddit.redditpost')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('posted', 'Posted'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('reddit_comment_id', models.CharField(blank=True, max_length=20, null=True)),
                ('upvotes', models.IntegerField(default=0)),
                ('downvotes', models.IntegerField(default=0)),
                ('reply_count', models.IntegerField(default=0)),
                ('posted_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('requires_manual_approval', models.BooleanField(default=False)),
                ('edited_content', models.TextField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('marked_successful', models.BooleanField(default=False)),
                ('marked_successful_at', models.DateTimeField(blank=True, null=True)),
                ('success_notes', models.TextField(blank=True, null=True)),
                ('follow_up_sent', models.BooleanField(default=False)),
                ('follow_up_content', models.TextField(blank=True, null=True)),
                ('follow_up_sent_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_replies', to=settings.AUTH_USER_MODEL)),
                ('marked_successful_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successful_replies', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='reddit.redditpost')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='redditpost',
            name='subreddit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='reddit.subreddit'),
        ),
        migrations.AddIndex(
            model_name='redditpost',
            index=models.Index(fields=['created_at'], name='reddit_redd_created_de1544_idx'),
        ),
        migrations.AddIndex(
            model_name='redditpost',
            index=models.Index(fields=['is_opportunity'], name='reddit_redd_is_oppo_d1298e_idx'),
        ),
        migrations.AddIndex(
            model_name='redditpost',
            index=models.Index(fields=['priority'], name='reddit_redd_priorit_7cacc7_idx'),
        ),
        migrations.AddIndex(
            model_name='redditpost',
            index=models.Index(fields=['last_monitored_at'], name='reddit_redd_last_mo_ce7908_idx'),
        ),
    ]
